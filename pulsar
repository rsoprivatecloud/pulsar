#!/usr/bin/python

import re
import sys
import pprint
import argparse
import ConfigParser
from collections import OrderedDict

import json
from sqlalchemy import create_engine


class Pulsar(object):
    """
    Pulsar: utterly likable systems admin robot.
    """

    def __init__(self, args):
        self._db_credentials = {}
        self._db_connection = None

        self._int_re = re.compile(r'^[1-9]+$')
        self._hex_re = re.compile(r'^instance-[a-f0-9]{8}$')
        self._uuid_re = re.compile(r'^[0-9a-f]{8}-'
                                    '[0-9a-f]{4}-'
                                    '[0-9a-f]{4}-'
                                    '[0-9a-f]{4}-[0-9a-f]{12}$')

        self._output_json = args.use_json

        self._units = OrderedDict()
        self._units["KB"] = float(2**10)
        self._units["MB"] = float(2**20)
        self._units["GB"] = float(2**30)
        self._units["TB"] = float(2**40)

        self._instance_query = """SELECT k.name as project, i.display_name,
                                         i.id, i.uuid, i.host, i.vm_state,
                                         i.task_state, i.vcpus,
                                         i.memory_mb * pow(2,20) as ram,
                                         f.address
                                  FROM instances as i
                                  JOIN keystone.tenant as k
                                  ON k.id=i.project_id
                                  JOIN fixed_ips as f
                                  ON i.id=f.instance_id """

        self._image_query = """SELECT image_id
                               FROM image_properties
                               WHERE deleted=0
                               AND name='instance_uuid'
                               AND value='%s' """

        self._zone_query = """SELECT id, display_name as name, host, vcpus,
                                     memory_mb * pow(2, 20) as ram
                              FROM instances WHERE deleted=0 AND host IN
                              (SELECT distinct host FROM services
                               WHERE availability_zone='%s')
                              ORDER BY host ASC"""


        try:
            self.db = self._get_db_connection()

            if args.instance_name:
                self.get_instances(args.instance_name)
                return

            elif args.compute_host:
                self.get_host_instances(args.compute_host)
                return
            
            elif args.zones:
                self.get_zone_report(args.zones)
                return

        except Exception as e:
            import traceback
            traceback.print_tb(sys.exc_info()[2])
            sys.exit("ABORT! Something went wrong! %s" % e.message)

        finally:
            if self._db_connection:
                self._db_connection.dispose()

    def _get_db_credentials(self):
        """Get mysql user/pass"""
        if not self._db_credentials:
            parser = ConfigParser.SafeConfigParser()
            if '/root/.my.cnf' in parser.read('/root/.my.cnf'):
                sql_user = parser.get("client", "user")
                sql_pass = parser.get("client", "password")
            else:
                sql_user = raw_input("Enter MySQL user: ")
                sql_pass = raw_input("Enter MySQL password: ")        
            self._db_credentials["user"] = sql_user
            self._db_credentials["pass"] = sql_pass
        return self._db_credentials

    def _get_db_connection(self, db="nova"):
        creds = self._get_db_credentials()
        creds["db"] = db
        connection_string = "mysql://%(user)s:%(pass)s@localhost/%(db)s" % creds 
        try:
            self._db_connection = create_engine(connection_string)
        except:
            sys.exit("Couldn't connect to database! "
                     "[connection string: %s]" % 
                     connection_string)
        return self._db_connection

    def _print_table(self, data):
        print(self.format_table(data))

    def _print_json(self, data):
        print(json.dumps(data))

    def human_readable(self, size, sep=""):
        unit = None
        divisor = 1
        size = int(size)
        for key, value in self._units.items():
            if size < value:
                return "%s%s%s" % (size / divisor, sep, unit)
            unit = key
            divisor = value

    def format_table(self, data, align="left", pad_str=" ", pad_times=1):
        out = ""
        for item in data:
            pad = max([len(key) for key in item]) * pad_times + len(pad_str)
            for key, value in item.items():
                if align == "left":
                    key = key.ljust(pad)
                else:
                    key = key.rjust(pad)
                key = key.replace("_", " ").upper()
                if type(value) in (tuple, list):
                    sep = "\n" + (pad_str * (pad + 2))
                    value = sep.join(value)
                out += "%s:%s%s\n" % (key, pad_str, value)
            out += "\n"
        return out.rstrip()

    def get_instance_info(self, results):
        infos = []
        for row in results:
            info = OrderedDict()
            info["name"]       = row["display_name"]
            info["virt_name"]  = "instance-%08x" % row["id"]
            info["id"]         = row["id"]
            info["uuid"]       = row["uuid"]
            info["fixed_ip"]   = row["address"]
            info["host"]       = row["host"]
            info["tenant"]     = row["project"]
            info["vm_state"]   = row["vm_state"]
            info["task_state"] = row["task_state"]
            info["vcpus"]      = row["vcpus"]
            info["ram"]        = self.human_readable(row["ram"])
            info["snapshots"]  = []
            db = self._get_db_connection('glance')
            for image in db.execute(self._image_query % row["uuid"]):
                info["snapshots"].append(image[0])
            db.dispose()
            infos.append(info)
        return infos

    def get_instances(self, instance_name):
        if self._hex_re.match(instance_name):
            instance_id = int(instance_name[-8:], 16)
            where = "WHERE i.id = %s" % instance_id
        elif self._int_re.match(instance_name):
            instance_id = int(instance_name)
            where = "WHERE i.id = %s" % instance_id
        elif self._uuid_re.match(instance_name):
            where = "WHERE i.uuid = '%s'" % instance_name
        else:
            where = "WHERE display_name LIKE '%%%%%s%%%%'" % instance_name

        results = self.db.execute(self._instance_query + where)
        infos = self.get_instance_info(results)
        
        if self._output_json:
            self._print_json(infos)
        else:
            self._print_table(infos)

    def get_host_instances(self, compute_host):
        where = "WHERE i.deleted=0 AND i.host LIKE '%s%%%%'" % compute_host
        results = self.db.execute(self._instance_query + where)
        infos = self.get_instance_info(results)

        if self._output_json:
            self._print_json(infos)
        else:
            self._print_table(infos)

    def get_zone_report(self, zones):
        if zones == "all":
            zones = self.db.execute("""SELECT distinct availability_zone AS az
                                       FROM services ORDER BY az""")
            zones = [row["az"] for row in zones]
        else:
            zones = zones.split(",")

        infos = []
        for zone in zones:

            results = self.db.execute(self._zone_query % zone)

            zone = {"zone": zone, "hosts": OrderedDict()}

            for row in results:
                hosts = zone["hosts"]
                if not row["host"] in hosts:
                    hosts[row["host"]] = {"vcpus": 0, "ram": 0, "vms": []}

                ram   = float(row["ram"])
                vcpus = int(row["vcpus"])
                hosts[row["host"]]["ram"]   += ram
                hosts[row["host"]]["vcpus"] += vcpus

                vm = OrderedDict()
                vm["id"]    = int(row["id"])
                vm["name"]  = row["name"]
                vm["vcpus"] = vcpus
                vm["ram"]   = ram
                hosts[row["host"]]["vms"].append(vm)

            for properties in zone["hosts"].values():
                properties["ram"] = self.human_readable(properties["ram"])
                for vm in properties["vms"]:
                    vm["ram"] = self.human_readable(vm["ram"])
            
            infos.append(zone)

        if self._output_json:
            self._print_json(infos)
        else:
            outs = []
            for zone in infos:
                if not zone["hosts"]:
                    continue
                for host, info in zone["hosts"].items():
                    out = OrderedDict()
                    out["zone"] = zone["zone"]
                    out["host"]  = host
                    out["ram"]   = info["ram"]
                    out["vcpus"] = info["vcpus"] 
                    vms = self.format_table(info["vms"], align="right", pad_times=2)
                    out["vms"] = "[\n%s\n]" % vms.rstrip()
                    outs.append(out)
            print(self.format_table(outs).rstrip())


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Nova swiss army knife")
    parser.add_argument("-j", "--json", dest="use_json", action="store_true",
                        help="Output results in JSON format")
    parser.add_argument("-i", "--info", dest="instance_name", metavar="NAME",
                        help='Get information about an instance')
    parser.add_argument("-g", "--host", dest="compute_host", metavar="HOST",
                        help='Get instances on a specific host')
    parser.add_argument("-z", "--zone", dest="zones", metavar="ZONE", default=None,
                        help="Get usage report for availability zone")
    args = parser.parse_args()

    if len(sys.argv) == 1:
        sys.exit(parser.format_help())

    Pulsar(args)


